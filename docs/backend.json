
{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user account within the VishwaVerse platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user account."
        },
        "username": {
          "type": "string",
          "description": "The user's unique username."
        },
        "firstName": {
          "type": "string",
          "description": "The user's first name."
        },
        "lastName": {
          "type": "string",
          "description": "The user's last name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "The user's phone number."
        },
        "createdAt": {
          "type": "string",
          "description": "The date and time the user account was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "The date and time the user account was last updated.",
          "format": "date-time"
        },
        "profileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: User 1:1 UserProfile)"
        }
      },
      "required": [
        "id",
        "email",
        "createdAt",
        "updatedAt"
      ]
    },
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents the profile information for a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "bio": {
          "type": "string",
          "description": "A short biography of the user."
        },
        "skills": {
          "type": "array",
          "description": "A list of the user's skills.",
          "items": {
            "type": "string"
          }
        },
        "experience": {
          "type": "string",
          "description": "A description of the user's experience."
        },
        "achievements": {
          "type": "array",
          "description": "A list of the user's achievements.",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: UserProfile 1:1 User)"
        }
      },
      "required": [
        "id"
      ]
    },
    "Admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Admin",
      "type": "object",
      "description": "Represents an administrator account within the VishwaVerse platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the admin account."
        },
        "email": {
          "type": "string",
          "description": "The admin's email address.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "The admin's first name."
        },
        "lastName": {
          "type": "string",
          "description": "The admin's last name."
        },
        "createdAt": {
          "type": "string",
          "description": "The date and time the admin account was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "The date and time the admin account was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "createdAt",
        "updatedAt"
      ]
    },
    "Project": {
      "title": "Project",
      "type": "object",
      "description": "Represents a client project, such as a website build, initiated through the quotation generator.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the project."
        },
        "clientId": {
          "type": "string",
          "description": "The ID of the user who owns this project."
        },
        "clientName": {
          "type": "string",
          "description": "The name of the client."
        },
        "clientEmail": {
          "type": "string",
          "description": "The email of the client."
        },
        "serviceCategory": {
          "type": "string",
          "description": "The category of the service requested (e.g., 'Web Development')."
        },
        "serviceName": {
          "type": "string",
          "description": "The specific service requested (e.g., 'Corporate Website')."
        },
        "tier": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "price": { "type": "string" }
          }
        },
        "addons": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": { "type": "string" },
              "price": { "type": "string" }
            }
          }
        },
        "total": {
          "type": "number",
          "description": "The total calculated price of the quotation."
        },
        "quotationMarkdown": {
          "type": "string",
          "description": "The AI-generated quotation in Markdown format."
        },
        "status": {
          "type": "string",
          "description": "The current status of the project.",
          "enum": ["In Review", "In Progress", "Completed", "Cancelled"]
        },
        "progress": {
          "type": "number",
          "description": "The completion percentage of the project (0-100)."
        },
        "updates": {
          "type": "array",
          "description": "A list of progress updates for the project.",
          "items": {
            "type": "object",
            "properties": {
              "message": { "type": "string" },
              "timestamp": { "type": "string", "format": "date-time" }
            }
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": ["id", "clientId", "serviceCategory", "serviceName", "total", "status", "progress", "createdAt", "updatedAt"]
    },
    "DesignOrder": {
      "title": "DesignOrder",
      "type": "object",
      "description": "Represents a design service order placed by a client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the design order."
        },
        "clientId": {
          "type": "string",
          "description": "The ID of the user who placed this order."
        },
        "clientName": {
          "type": "string",
          "description": "The name of the client."
        },
        "clientEmail": {
          "type": "string",
          "description": "The email of the client."
        },
        "serviceType": {
          "type": "string",
          "description": "The type of design service requested (e.g., 'Logo Design').",
          "enum": ["logo", "post"]
        },
        "projectBrief": {
          "type": "string",
          "description": "A detailed brief of the design project."
        },
        "status": {
          "type": "string",
          "description": "The current status of the design order.",
          "enum": ["Pending", "In Progress", "Completed", "Cancelled"]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": ["id", "clientId", "clientName", "clientEmail", "serviceType", "projectBrief", "status", "createdAt", "updatedAt"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "email",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user account information. Includes 'profileId' which will be used to link to the user profile. This enables path-based ownership for user profiles.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "userProfiles/{profileId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. The 'userId' field links back to the user document, enforcing a 1:1 relationship.",
          "params": [
            {
              "name": "profileId",
              "description": "The unique identifier of the user profile."
            }
          ]
        }
      },
      {
        "path": "roles_admin/{userId}",
        "definition": {
          "entityName": "Admin",
          "schema": {
            "$ref": "#/backend/entities/Admin"
          },
          "description": "Collection to store admin roles. The existence of a document with a user's ID in this collection grants admin privileges.  This relies on Existence over Content for authorization.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the admin user."
            }
          ]
        }
      },
      {
        "path": "projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": { "$ref": "#/backend/entities/Project" },
          "description": "Stores all client projects initiated from the quotation generator."
        }
      },
      {
        "path": "designOrders/{orderId}",
        "definition": {
          "entityName": "DesignOrder",
          "schema": { "$ref": "#/backend/entities/DesignOrder" },
          "description": "Stores all client design orders initiated from the design studio."
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support user authentication, profile management, and administrative roles, focusing on security, scalability, and debuggability. It incorporates key principles such as Authorization Independence, DBAC (Database-Based Access Control), and Structural Segregation to streamline security rules and maintain data integrity.\n\n*   **Authorization Independence:** The `users/{userId}` collection includes the `profileId` field. While seemingly creating a `get()` dependency, the intended use-case is to simply store the ID. Access to `/users/{userId}/profile` is granted via path-based ownership, eliminating the need for `get()` calls in security rules.\n*   **Structural Segregation:** User profiles and admin roles are stored in separate collections (`userProfiles` and `roles_admin`), ensuring different security postures for each. This segregation simplifies rules and avoids mixing data with varying access requirements.\n*   **DBAC:** Admin roles are managed through the `roles_admin/{uid}` collection. The existence of a document for a user in this collection grants admin privileges, enabling simple existence-based security rules.\n*   **QAPs:** `list` operations are secured by enforcing ownership and role-based access controls. Path-based ownership (`users/{userId}`) allows listing only resources owned by the authenticated user. Admin role checks in the `roles_admin` collection authorize administrative `list` operations.\n\nThis structure facilitates secure and efficient data access while adhering to core design principles, minimizing complexity and maximizing debuggability."
  }
}

    